# Name of your application. Used to uniquely configure containers.
service: verysimpleseo

# Name of the container image.
# IMPORTANT: Replace 'yourdockerhubusername' with your actual Docker Hub username
image: yourdockerhubusername/verysimpleseo

# Deploy to these servers.
# IMPORTANT: Replace with your actual server IP addresses
# For Fly.io: Get IP from `fly ips list`
# For other VPS: Use your server's public IP
servers:
  web:
    - YOUR_SERVER_IP_HERE
  # job:
  #   hosts:
  #     - YOUR_SERVER_IP_HERE
  #   cmd: bin/jobs
  # Note: For single-server MVP, we run jobs inside Puma (see SOLID_QUEUE_IN_PUMA below)

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  # IMPORTANT: Replace with your actual domain or Fly.io app URL
  host: verysimpleseo.fly.dev

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...

  # IMPORTANT: Replace with your Docker Hub username
  username: yourdockerhubusername

  # Always use an access token rather than real password when possible.
  # Set KAMAL_REGISTRY_PASSWORD in your environment before deploying
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL           # PostgreSQL connection string
    - OPENAI_API_KEY        # For GPT-4o Mini article writing
    - GEMINI_API_KEY        # For Gemini 2.5 Flash analysis
    - GOOGLE_SEARCH_KEY     # Google Custom Search API
    - GOOGLE_SEARCH_CX      # Google Custom Search Engine ID
    - STRIPE_SECRET_KEY     # Stripe secret key (use sk_live_... for production)
    - STRIPE_SIGNING_SECRET # Stripe webhook signing secret
    - RESEND_API_KEY        # Resend email API key
  clear:
    # App configuration
    APP_HOST: verysimpleseo.fly.dev
    APP_URL: https://verysimpleseo.fly.dev
    RAILS_ENV: production
    RAILS_LOG_LEVEL: info

    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # Increase if keyword research/article generation jobs are slow
    # JOB_CONCURRENCY: 3

    # Set number of Puma worker processes (default: auto-detected based on CPU cores)
    # For 1GB RAM servers, keep at 1-2. For 2GB+, can increase to 3-4.
    # WEB_CONCURRENCY: 2

    # Uncomment if using external database (not needed for Fly.io Postgres)
    # DB_HOST: your-db-host.example.com

    # Uncomment for verbose Rails logging (useful for debugging initial deployment)
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "verysimpleseo_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.3.0
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
